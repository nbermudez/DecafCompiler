%decls %{
	#include <string>
	#include <list>
	#include <vector>
	#include <cstring>
	#include <cstdlib>
	#include <sstream>
	#include <cstddef>

	#include "Value.h"
	#include "Util.h"
	#include "error_handler.h"
	#include "register_manager.h"
	#include "context_manager.h"
	using namespace std;

	class Statement;
	typedef list<Statement *> StatementList;

	class Expression;
	typedef list<Expression *> ExpressionList;

	class VariableDef;
	typedef list<VariableDef *> VariableDefList;

	class ParameterDef;
	typedef list<ParameterDef *> ParameterDefList;

	class MethodDef;
	typedef list<MethodDef *> MethodDefList;

	typedef list<string> VariableNameList;

	class BlockStatement;
	void setStatementList(BlockStatement *block, StatementList *stList);
	void addStatement(BlockStatement *block, Statement *statement);

	typedef enum {
		OpAdd,
		OpSub,
		OpMul,
		OpDiv,
		OpMod,
		OpAnd,
		OpOr,
		OpNot,
		OpGT,
		OpLT,
		OpGTE,
		OpLTE,
		OpEq,
		OpNotEq,
		OpRShift,
		OpLShift,
		OpRot
	} ExpressionOperator;

	typedef union {
		int int_value;
		bool bool_value;
		char *string_value;
	} union_constants;


	/*** Typedefs for Decorated Nodes ***/
	class DecoratedExpression;
	typedef list<DecoratedExpression *> DecoratedExpressionList;

	class DecoratedStatement;
	typedef list<DecoratedStatement *> DecoratedStatementList;
%}

%{
	#include "decaf_tree.h"
	int statement_line;
	int deepLevel = 1;


    bool insideLoop = false;
    bool breakFound = false;
    bool continueFound = false;
    bool returnFound = false;

    ExpressionType *currentReturnType = NULL; 

    Function *currentFunction = NULL;

    LocalVariablesMap *local_variables = NULL;	

	string OperatorToString(ExpressionOperator oper) {
		switch (oper)
		{
			case OpAdd: return "+";
			case OpSub: return "-";
			case OpMul: return "*";
			case OpDiv: return "/";
			case OpMod: return "%";
			case OpAnd: return "&&";
			case OpOr: return "||";
			case OpNot: return "!";
			case OpGT: return ">";
			case OpLT: return "<";
			case OpGTE: return ">=";
			case OpLTE: return "<=";
			case OpEq: return "==";
			case OpNotEq: return "!=";
			case OpRShift: return ">>";
			case OpLShift: return "<<";
			case OpRot: return "rot";
			default:
					return "Unknown";
		}
	}

	ExpressionType *TypeToExpressionType(Type type) {
		ExpressionType *newType = NULL;
		switch (type) {
			case Int:
				newType = new IntegerType();
				break;
			case Boolean:
				newType = new BooleanType();
				break;
			case Void:
				newType = new VoidType();
				break;
		}

		return newType;
	}

	bool isUnreachableStatement() {
		if (continueFound || breakFound || returnFound)
			return true;
		return false;
	}
%}

%header "decaf_tree.h"
%output "decaf_tree.cpp"

%option lang="C++"

%node DNode %abstract %typedef

%node MainNode DNode %abstract

%node ClassDef MainNode = {
    string name;
    VariableDefList *field_def_list;
    MethodDefList *method_def_list;
}

/****Definitions Tree****/
%node Definition DNode %abstract

%end %{
void addFieldDef(ClassDef *classDef, VariableDef *field_def) {
	if (classDef->field_def_list == 0)
		classDef->field_def_list = new VariableDefList;
	classDef->field_def_list->push_back(field_def);
}

void addMethod(ClassDef *classDef, MethodDef *method_def) {
	if (classDef->method_def_list == 0)
		classDef->method_def_list = new MethodDefList;
	classDef->method_def_list->push_back(method_def);
}
%}

%node VariableDef Definition = {
	string variable_name;
	int line;
	int column;
	%nocreate Type variable_type;
	%nocreate bool is_array_def = {false};
	%nocreate int array_dimension = {0};
	%nocreate Expression* initial_value = {0};
}

%node LocalVariableDefList Statement = {
	%nocreate Type variable_type;
	%nocreate VariableNameList	*variable_names = {NULL};
}

%node ParameterDef Definition = {
	string parameter_name;
	Type parameter_type;
}

%node MethodDef Definition = {
	string method_name;
	int line;
	%nocreate Type method_return_type;
	%nocreate ParameterDefList *method_parameters;
	%nocreate Statement *method_body;
}
/*=========================*/

/****Expressions Tree****/
%node Expression DNode %abstract

%node BinaryExpression Expression = {
	Expression *left;
	Expression *right;
	ExpressionOperator  expression_operator;
}
%node UnaryExpression Expression = {
	Expression *expression;
	ExpressionOperator  expression_operator;
}
%node LValueExpression Expression = {
	string variable_name;
	Expression *array_index;
}
%node MethodCallExpression Expression = {
	string method_name;
	ExpressionList *method_arguments;
}
%node IntConstantExpression Expression = {
	%nocreate Type constant_type = {Int};
	int int_value;
}

%node RealConstantExpression Expression = {
	%nocreate Type constant_type = {Real};
	float float_value;
}

%node BooleanConstantExpression Expression = {
	%nocreate Type constant_type = {Boolean};
	bool bool_value;
}

%node StringConstantExpression Expression = {
	%nocreate Type constant_type = {String};
	char *string_value;
}
/*=========================*/

/****Statements Tree****/
%node Statement DNode %abstract = {
	int line;
	int column;
}
%node AssignmentStatement Statement = {
	Expression *lvalue;
	Expression *expr;
}
%node MethodCallStatement Statement = {
	string name;
	ExpressionList *arguments;
}
%node IfStatement Statement = {
	Expression *condition;
	Statement *true_part;
	Statement *false_part;
}
%node WhileStatement Statement = {
	Expression *condition;
	Statement *loop_body;
}
%node ForStatement Statement = {
	Statement *assignment_list1;
	Expression *condition;
	Statement *assignment_list2;
	Statement *loop_body;
}
%node ReturnStatement Statement = {
	Expression *expr;
}
%node BreakStatement Statement
%node ContinueStatement Statement
%node BlockStatement Statement = {
	%nocreate StatementList *statement_list = {0};
}
%node PrintStatement Statement = {
	ExpressionList *arguments;
}
%node ReadStatement Statement = {
	ExpressionList *arguments;
}

%end %{
void setStatementList(BlockStatement *block, StatementList *stList) {
	block->statement_list = stList;
}

void addStatement(BlockStatement *block, Statement *statement) {
	if (block->statement_list == 0)
		block->statement_list = new StatementList;

	block->statement_list->push_back(statement);
}
%}
/*=====================================================================*/

%operation %virtual string toString(DNode *this);

toString(ClassDef) {
	ostringstream out;

	out << "class " << name << "\n";
	out << "{" << "\n";

	if (field_def_list != 0)
		out << ListToString(field_def_list, ";\n", true) << "\n";

	if (method_def_list != 0)
		out << ListToString(method_def_list, "\n\n", true);

	out << "}" << endl;

	return out.str();
}

toString(VariableDef) {
	ostringstream out;

	out << TypeToString(variable_type) << " " << variable_name;

	if (is_array_def)
		out << "[" << array_dimension << "]";

	if (initial_value != 0)
		out << " = " + initial_value->toString();

	return out.str();
}

toString(LocalVariableDefList) {
	ostringstream out;

	out << TypeToString(variable_type) << " ";

	return out.str();
}

toString(ParameterDef) {
	return TypeToString(parameter_type) + " " + parameter_name;
}

toString(MethodDef) {
	ostringstream out;

	out << TypeToString(method_return_type) << " " << method_name << "(";
	if (method_parameters != 0)
		out << ListToString(method_parameters, ", ", false);
	out << ")" << endl;
	out << method_body->toString() << endl;

	return out.str();
}

toString(BinaryExpression) {
    ostringstream out;
    
    out << left->toString() << OperatorToString(expression_operator) << right->toString();
    
    return out.str();
}

toString(UnaryExpression) {
    ostringstream out;
    
    out << OperatorToString(expression_operator) << expression->toString();
    
    return out.str();
}

toString(LValueExpression) {
	ostringstream out;

	out << this->variable_name;

	if (array_index != 0)
		out << "[" << array_index->toString() << "]";

	return out.str();
}

toString(MethodCallExpression) {
	ostringstream out;

	out << this->method_name << "(" << ListToString(method_arguments, ", ", false) << ")";

	return out.str();
}

toString(IntConstantExpression) {
	ostringstream out;

	out << int_value ;
	return out.str();
}

toString(RealConstantExpression) {
	ostringstream out;

	out << float_value;
	return out.str();
}

toString(BooleanConstantExpression) {
	ostringstream out;

	if (bool_value)
		out << "true";
	else 
		out << "false";
	return out.str();
}

toString(StringConstantExpression) {
	ostringstream out;

	out << string_value;
	return out.str();
}

/* toString for statement */
toString(AssignmentStatement) {
	ostringstream out;

	out << lvalue->toString() << " = " << expr->toString() << ";";

	return out.str();
}

toString(MethodCallStatement) {
	return this->name + "(" + ListToString(arguments, ", ", false) + ");";
}

toString(IfStatement) {
	ostringstream out;

	out << "if (" << condition->toString() << ")" << endl;
	out << true_part->toString() << endl;

	if (false_part != 0) {
		out << "else" << endl;
		out << false_part->toString() << endl;
	}

	return out.str();
}

toString(WhileStatement) {
	ostringstream out;

	out << "while (" << condition->toString() << ")" << endl;
	out << loop_body->toString() << endl;

	return out.str();
}

toString(ForStatement) {
	ostringstream out;

	out << "for (" << assignment_list1->toString();
	out << ";" << condition->toString();
	out << ";" << assignment_list2->toString() << ")";
	out << endl << loop_body->toString() << endl;

	return out.str();
}

toString(ReturnStatement) {
	ostringstream out;
	
	out << "return ";
	if (expr != NULL) {
		out << expr->toString();
	}
	out << ";";
	
	return out.str();
}

toString(BreakStatement) {
	return "break;";
}

toString(ContinueStatement) {
	return "continue;";
}

toString(BlockStatement) {
	ostringstream out;

	out << "{" << endl;

	if (statement_list != 0)
		out << ListToString(statement_list, "\n", true);

	out << "}";

	return out.str();
}

toString(PrintStatement) {
	return  "print " + ListToString(arguments, ", ", false) + ";";
}

toString(ReadStatement) {
	return  "read " + ListToString(arguments, ", ", false) + ";";
}

%include "decaf_types.tc"

/*=====================================================================*/
%operation %virtual DecoratedNode* validateSemantics(DNode *this);

/*** Validate Semantics for Expressions ***/
/*=====================================================================*/
validateSemantics(ClassDef) {
	if (field_def_list != NULL) {
	    list<VariableDef*>::iterator variable_iterator = field_def_list->begin();
	    
	    while(variable_iterator != field_def_list->end()) {
	        VariableDef * field_def = *variable_iterator;
	        field_def->registerDefinition();
	        variable_iterator++;
	    }
	}

    list<MethodDef*>::iterator method_iterator = method_def_list->begin();
    
    while(method_iterator != method_def_list->end()) {
        MethodDef * method_def = *method_iterator;
        method_def->registerDefinition();
        method_iterator++;
    }
    
    /************ Check method bodies. ************/
    bool mainFound = false;
    method_iterator = method_def_list->begin();
    DecoratedBlockStatement *main_block = NULL;
    while(method_iterator != method_def_list->end()) {
        MethodDef * method_def = *method_iterator;
        
        insideLoop = false;
		continueFound = false;
		breakFound = false;
		returnFound = false;

        currentFunction = getSymbolTableInstance()->getFunction(method_def->method_name);
        
        if (method_def->method_name == "main") {
        	main_block = method_def->checkBody();
        	currentFunction->setBody(main_block);
        	mainFound = true;
        } else {
        	DecoratedBlockStatement *block = method_def->checkBody();
        	currentFunction->setBody(block);
        }
        method_iterator++;
    }

    if (!mainFound) {
    	ErrorHandler::getInstance().handleError(statement_line, "main method not found");
    }

    DecoratedClass *decorated_class = new DecoratedClass(this->name);
    decorated_class->main = main_block;
    return decorated_class;
}

validateSemantics(BinaryExpression) {
    DecoratedExpression *dLeft = (DecoratedExpression*)(left->validateSemantics());
    DecoratedExpression *dRight = (DecoratedExpression*)(right->validateSemantics());
    
    if (dLeft == NULL || dRight == NULL)
        return NULL;
    
    if (!dLeft->type->isEquivalent(dRight->type)) {
        ErrorHandler::getInstance().handleError(statement_line, "type mismatch for operator " + 
                                                OperatorToString(expression_operator) +
                                                " for types " + dLeft->type->stringValue() +
                                                " and " + dRight->type->stringValue());
        cout << dLeft->type->stringValue() << " not equivalent to " << dRight->type->stringValue() << endl;
        return NULL;
    }

    if (dynamic_cast<StringType*>(dLeft->type) != NULL) {
        ErrorHandler::getInstance().handleError(statement_line, "type mismatch for operator " + 
                                                OperatorToString(expression_operator) +
                                                " for types " + dLeft->type->stringValue() +
                                                " and " + dRight->type->stringValue());
        return NULL;
    }
    
    ExpressionType      *type;
    
    if (dynamic_cast<FloatType*>(dLeft->type) != NULL
        || dynamic_cast<FloatType*>(dRight->type) != NULL) {
        
        type = new FloatType();
    	ErrorHandler::getInstance().handleError(statement_line, "floating type not supported");
    	return NULL;
    }
    if (dynamic_cast<BooleanType*>(dLeft->type) != NULL) {
        type = new BooleanType();
    }
    if (dynamic_cast<IntegerType*>(dLeft->type) != NULL) {
        type = new IntegerType();
    }
    
    
    switch(expression_operator) {
        case OpAdd:
            if (type->isNumeric())
                return new DecoratedAddExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpSub:
            if (type->isNumeric())
                return new DecoratedSubExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpMul:
            if (type->isNumeric())
                return new DecoratedMultExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpDiv:
            if (type->isNumeric())
                return new DecoratedDivExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpMod:
            if (type->isNumeric())
                return new DecoratedModExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpAnd:
            if (type->isBoolean())
                return new DecoratedAndExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpOr:
            if (type->isBoolean())
                return new DecoratedOrExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpGT:
            if (type->isNumeric())
                return new DecoratedGTExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpLT:
            if (type->isNumeric())
                return new DecoratedLTExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpGTE:
            if (type->isNumeric())
                return new DecoratedGTEExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpLTE:
            if (type->isNumeric())
                return new DecoratedLTEExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpEq:
            if (type->isBoolean() || type->isNumeric())
                return new DecoratedEqExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpNotEq:
            if (type->isBoolean() || type->isNumeric())
                return new DecoratedNotEqExpression(new BooleanType(), dLeft, dRight);
            else
                return NULL;
        case OpRShift:
            if (type->isNumeric())
                return new DecoratedRShiftExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpLShift:
            if (type->isNumeric())
                return new DecoratedLShiftExpression(type, dLeft, dRight);
            else
                return NULL;
        case OpRot:
            if (type->isNumeric())
                return new DecoratedRotExpression(type, dLeft, dRight);
            else
                return NULL;
        default:
            return NULL;
    }
}

validateSemantics(UnaryExpression) {
    DecoratedExpression *dExpression = (DecoratedExpression*)expression->validateSemantics();
    
    if (dExpression == NULL)
        return NULL;
        
    ExpressionType  *type;
    
    switch(expression_operator) {
        case OpSub:
            if (dExpression->type->isNumeric())
                return new DecoratedNegExpression(dExpression->type, dExpression);
            else
                return NULL;
        case OpNot:
            if (dExpression->type->isBoolean())
                return new DecoratedNotExpression(dExpression->type, dExpression);
            else
                return NULL;
        default:
            return NULL;
    }
}

validateSemantics(LValueExpression) {
	cout << "inside lvalue with " << variable_name << endl;
	Variable *variable_def = getSymbolTableInstance()->getVariable(variable_name);
	//TODO: agregar los scopes cuando ya esten.

    DecoratedExpression *d_array_index = NULL;
    if (array_index != NULL) {
        if (dynamic_cast<ArrayVariable*>(variable_def) == NULL) {
        	ErrorHandler::getInstance().handleError(statement_line, 
        		"variable '" + variable_name + "' is not an array");
        }
        d_array_index = (DecoratedExpression*)array_index->validateSemantics();

        if (d_array_index == NULL){
        	return NULL;
        } else {
        	if (!d_array_index->type->isEquivalent(new IntegerType())) {
        		ErrorHandler::getInstance().handleError(statement_line, 
        			"array index expression must be of int type");
        		return NULL;
        	}
        }
    }

    bool isParameter = currentFunction->findParameter(variable_name) != NULL;

    if (variable_def == NULL && !isParameter) {
		ErrorHandler::getInstance().handleError(statement_line, 
			"variable '" + variable_name + "' not declared in this scope");
		return NULL;
	}

    return new DecoratedLValue(new IntegerType(), variable_name, d_array_index);
}

validateSemantics(MethodCallExpression) {    
	Function *function_def = getSymbolTableInstance()->getFunction(method_name);
	if ( function_def == NULL ) {
		ErrorHandler::getInstance().handleError(statement_line, "undefined method '" + method_name + "'");
		return NULL;
	}

	DecoratedExpressionList *d_arguments = new DecoratedExpressionList;
	if (method_arguments != NULL) {
	    list<Expression*>::iterator expression_iterator = method_arguments->begin();	 

	    if (function_def->parameters.size() != method_arguments->size()) {
	    	ErrorHandler::getInstance().handleError(statement_line, 
	    		"incorrect number of arguments in method '" + method_name + "'");
	    	return NULL;	
	    }   
	    
	    int parameterId = 0;
	    int nullCount = 0;
	    while (expression_iterator != method_arguments->end()) {
	        Expression *expression = *expression_iterator;
	        DecoratedExpression *d_expr = (DecoratedExpression*)expression->validateSemantics();

	        if (d_expr == NULL)
	        	return NULL;

	        if (!(d_expr->type->isEquivalent(function_def->getParameter(parameterId)->type))) {
	        	ostringstream out;

	        	out << "type mismatch for parameter at position " << parameterId 
	        		<< " expected " << function_def->getParameter(parameterId)->type->stringValue() 
	        		<< " but found " << d_expr->type->stringValue();
	        	ErrorHandler::getInstance().handleError(statement_line, out.str());
	        	nullCount++;
	        }

	        d_arguments->push_back(d_expr);
	        d_expr->line = statement_line;
	        
	        expression_iterator++;
	        parameterId++;
	    }
	    if (nullCount != 0) {
			return NULL;
		}
	}

	ExpressionType *type;

	switch(function_def->type) {
		case Int:
			type = new IntegerType();
			break;
		case Boolean:
			type = new BooleanType();
			break;
		case Void:
			ErrorHandler::getInstance().handleError(statement_line, 
				"void method '" + method_name + "' cannot be used as an expression");
			return NULL;
		default:
			ErrorHandler::getInstance().handleError(statement_line, "this shouldn't be happening");

	}

    return new DecoratedMethodCallExpression(type, method_name, d_arguments);
}

validateSemantics(IntConstantExpression) {
    return new DecoratedIntConstant(new IntegerType(), int_value);
}

validateSemantics(RealConstantExpression) {
    ErrorHandler::getInstance().handleError(statement_line, "floating type is not supported");
    return NULL;
}

validateSemantics(BooleanConstantExpression) {
    return new DecoratedBooleanConstant(new BooleanType(), bool_value);
}

validateSemantics(StringConstantExpression) {
	getSymbolTableInstance()->registerString(string_value);
    return new DecoratedStringConstant(new StringType(), string_value);
}

/*** Validate Semantics for Statements ***/
/*=====================================================================*/
validateSemantics(AssignmentStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    cout << "validating assignment statement semantics" << endl;
    DecoratedLValue *d_lvalue = (DecoratedLValue*)(lvalue->validateSemantics());
    cout << "after lvalue semantics" << endl;
    DecoratedExpression *d_expr = (DecoratedExpression*)(expr->validateSemantics());

    if (d_expr == NULL || d_lvalue == NULL) {
    	cout << "returning null" << endl;
    	return NULL;
    }

    if (!(d_expr->type->isEquivalent(d_lvalue->type))) {
    	ErrorHandler::getInstance().handleError(line, 
    		"type mismatch assigning " + d_expr->type->stringValue() 
    		+ " to " + d_lvalue->type->stringValue());
    	return NULL;
    }

    d_lvalue->line = line;
    d_expr->line = line;

    return new DecoratedAssignmentStatement(line, d_lvalue, d_expr);
}

validateSemantics(MethodCallStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

	Function *function_def = getSymbolTableInstance()->getFunction(name);
	if ( function_def == NULL ) {
		ErrorHandler::getInstance().handleError(line, "undefined method '" + name + "'");
		return NULL;
	}

	DecoratedExpressionList *d_arguments = new DecoratedExpressionList;
	if (arguments != NULL) {
	    list<Expression*>::iterator expression_iterator = arguments->begin();	 

	    if (function_def->parameters.size() != arguments->size()) {
	    	ErrorHandler::getInstance().handleError(line, 
	    		"incorrect number of arguments in method '" + name + "'");
	    	return NULL;	
	    }   
	    
	    int parameterId = 0;
	    int nullCount = 0;
	    while (expression_iterator != arguments->end()) {
	        Expression *expression = *expression_iterator;
	        DecoratedExpression *d_expr = (DecoratedExpression*)expression->validateSemantics();

	        if (d_expr == NULL)
	        	return NULL;

	        if (!(d_expr->type->isEquivalent(function_def->getParameter(parameterId)->type))) {
	        	ErrorHandler::getInstance().handleError(line, 
	        		"type mismatch for parameter at position " + parameterId);
	        	nullCount++;
	        }

	        d_arguments->push_back(d_expr);
	        d_expr->line = line;
	        
	        expression_iterator++;
	        parameterId++;
	    }
	    if (nullCount != 0) {
			return NULL;
		}
	}

    return new DecoratedMethodCallStatement(line, name, d_arguments);
}

validateSemantics(IfStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    DecoratedExpression *d_condition = (DecoratedExpression*)(condition->validateSemantics());
    
    insideLoop = true;
    DecoratedBlockStatement *d_true = (DecoratedBlockStatement*)(true_part->validateSemantics());
    insideLoop = false;
    returnFound = false;
    continueFound = false;
    breakFound = false;

    DecoratedBlockStatement *d_false = NULL;
    
    if (false_part != NULL) {
        d_false = (DecoratedBlockStatement*)(false_part->validateSemantics());

        if (d_false == NULL)
        	return NULL;
    }
    insideLoop = false;

    if (d_true == NULL || d_condition == NULL) {
    	cout << "return null 1" << endl;
    	cout << (d_condition == NULL) << endl;
    	cout << (d_true == NULL) << endl;
    	return NULL;
    }

    if (!d_condition->type->isBoolean()) {
    	ErrorHandler::getInstance().handleError(line, "if statement condition must be boolean");
    	cout << "return null 2" << endl;
    	return NULL;
    }

    return new DecoratedIfStatement(line, d_condition, d_true, d_false);
}

validateSemantics(WhileStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    DecoratedExpression *d_expr = (DecoratedExpression*)condition->validateSemantics();

    insideLoop = true;
    continueFound = false;
    breakFound = false;

    DecoratedStatement *d_stmt = (DecoratedStatement*)loop_body->validateSemantics();
    
    insideLoop = false;
    

    if (d_expr == NULL || d_stmt == NULL)
    	return NULL;

    if (!d_expr->type->isBoolean()) {
    	ErrorHandler::getInstance().handleError(line, "while statement condition must be boolean");
    	return NULL;
    }

    d_expr->line = line;
    d_stmt->line = line;

    return new DecoratedWhileStatement(line, d_expr, d_stmt);
}

validateSemantics(ForStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    DecoratedStatement *d_assignment_list1 = (DecoratedStatement*)assignment_list1->validateSemantics();
    DecoratedExpression *d_condition = (DecoratedExpression*)condition->validateSemantics();
    DecoratedStatement *d_assignment_list2 = (DecoratedStatement*)assignment_list2->validateSemantics();

    insideLoop = true;
    DecoratedBlockStatement *d_body = (DecoratedBlockStatement*)loop_body->validateSemantics();
    insideLoop = false;
    continueFound = false;
    breakFound = false;

    if (d_assignment_list1 == NULL || d_assignment_list2 == NULL 
    	|| d_condition == NULL || d_body == NULL) {
    	return NULL;
    }

    if (!d_condition->type->isBoolean()) {
    	ErrorHandler::getInstance().handleError(line, "for statement condition must be boolean");
    	return NULL;
    }

    return new DecoratedForStatement(line, d_assignment_list1, d_condition, d_assignment_list2, d_body);
}

validateSemantics(ReturnStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;
	returnFound = true;

    DecoratedExpression *decorated_expression = NULL;
    if (expr != NULL) {
        decorated_expression = (DecoratedExpression*)expr->validateSemantics();
    }

    if (expr != NULL && decorated_expression == NULL) {
    	return NULL;
    }

    if (expr == NULL && currentFunction->type != Void) {
    	ErrorHandler::getInstance().handleError(line, 
    		"return expression must be " + TypeToString(currentFunction->type) 
    		+ " but found void ");
    }

    if (currentFunction->type == Void && expr != NULL) {
    	ErrorHandler::getInstance().handleError(line, "void method cannot return an expression");
    	return NULL;
    } else if (decorated_expression != NULL && 
    	!decorated_expression->type->isEquivalent(TypeToExpressionType(currentFunction->type))) {
    	ErrorHandler::getInstance().handleError(line, 
    		"return expression must be " + TypeToString(currentFunction->type)
    		+ " but found " + decorated_expression->type->stringValue());
    	return NULL;
    }

    return new DecoratedReturnStatement(line, decorated_expression);
}

validateSemantics(BreakStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    if (!insideLoop) {
    	ErrorHandler::getInstance().handleError(line, "break statement must be inside a loop");
    	return NULL;
    }

    breakFound = true;
    return new DecoratedBreakStatement(line);
}

validateSemantics(ContinueStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    if (!insideLoop) {
    	ErrorHandler::getInstance().handleError(line, "continue statement must be inside a loop");
    	return NULL;
    }

    continueFound = true;
    return new DecoratedContinueStatement(line);
}

validateSemantics(BlockStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

    list<Statement*>::iterator statement_iterator = statement_list->begin();
    
    DecoratedStatementList  *decorated_statement_list = new DecoratedStatementList;

    //TODO: hacer pop a un stack del mapa actual

    int nullCount = 0;
    deepLevel += 1;
    while (statement_iterator != statement_list->end()) {
        Statement *statement = *statement_iterator;
        DecoratedStatement *decorated_statement =  (DecoratedStatement*)statement->validateSemantics();

        if (decorated_statement != NULL)
        	decorated_statement_list->push_back(decorated_statement);
        else
        	nullCount++;
        
        statement_iterator++;
    }
    cout << "nullCount " << nullCount << endl;
    if (nullCount>0)
    	return NULL;

    DecoratedBlockStatement *newBlock = new DecoratedBlockStatement(line, decorated_statement_list);
    newBlock->deepLevel = deepLevel - 1;
    deepLevel -= 1;
    
    return newBlock;
}

validateSemantics(PrintStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

	list<Expression*>::iterator expression_iterator = arguments->begin();
    
    DecoratedExpressionList *d_arguments = new DecoratedExpressionList;
    while (expression_iterator != arguments->end()) {
        Expression *expression = *expression_iterator;
        DecoratedExpression *d_expr = (DecoratedExpression*)expression->validateSemantics();

        if (d_expr == NULL)
        	return NULL;

        d_arguments->push_back(d_expr);
        
        expression_iterator++;
    }

    return new DecoratedPrintStatement(line, d_arguments);
}

validateSemantics(ReadStatement) {
	if (isUnreachableStatement()) 
		ErrorHandler::getInstance().handleWarning(line, "unreachable statement");

	statement_line = line;

	list<Expression*>::iterator expression_iterator = arguments->begin();
    
    DecoratedExpressionList *d_arguments = new DecoratedExpressionList;
    while (expression_iterator != arguments->end()) {
        Expression *expression = *expression_iterator;
        DecoratedExpression *d_expr = (DecoratedExpression*)expression->validateSemantics();

        if (d_expr == NULL)
        	return NULL;

        d_arguments->push_back(d_expr);
        
        expression_iterator++;
    }

    return new DecoratedReadStatement(line, d_arguments);
}

validateSemantics(VariableDef) {
    /* DO NOTHING */
    return NULL;
}

validateSemantics(ParameterDef) {
    /* DO NOTHING */
    return NULL;
}

validateSemantics(MethodDef) {
    /* DO NOTHING */
    return NULL;
}

validateSemantics(LocalVariableDefList) {
	/* DO NOTHING */
	currentFunction->activation_size += variable_names->size() * 4;
	return NULL;
}


/*=====================================================================*/
%operation %virtual void registerDefinition(Definition *this);

registerDefinition(MethodDef) {
	Function *prev_def = getSymbolTableInstance()->getFunction(method_name);

	if (prev_def != NULL) {
		ErrorHandler::getInstance().handleError(line, 
			"already defined method '" + method_name + "'");
		return;
	}

	if (getSymbolTableInstance()->getVariable(method_name) != NULL) {
		ErrorHandler::getInstance().handleError(line, 
			"there is a global variable declared with this name: '" + method_name + "'");
	}

	if (method_name == "main") {
		if (method_parameters->size() > 0) {
			ErrorHandler::getInstance().handleError(line, 
				"main method cannot have parameters");
		}
		if (method_return_type != Void) {
			ErrorHandler::getInstance().handleError(line, 
				"main method must be void");
		}
	}

	Function *function_def = new Function;

	list<ParameterDef*>::iterator it = method_parameters->begin();
	int parameterId = 0;
	map<string, string> parameter_names;
	while (it != method_parameters->end()) {
		ExpressionType *type;
		string parameter_name = (*it)->parameter_name;

		switch((*it)->parameter_type) {
			case Int:
				type = new IntegerType();
				break;
			case Boolean:
				type = new BooleanType();
				break;
			default:
				ErrorHandler::getInstance().handleError(line, 
					"method parameters can only be integer or boolean");
		}

		if (parameter_names.count(parameter_name) > 0) {
			ErrorHandler::getInstance().handleError(line, 
				"duplicated parameter name '" + (parameter_name) + "'");
		} else {
			parameter_names[parameter_name] = parameter_name;
		}

		SimpleVariable *parameter = new SimpleVariable(type, parameter_name);
		parameter->parameterId = parameterId;
		function_def->parameters.push_back(parameter);

		if (parameterId > 3) {
			function_def->activation_size += 4;
		}

		it++;
		parameterId++;
	}

	if (method_return_type != Int && method_return_type != Boolean && method_return_type != Void) {
		ErrorHandler::getInstance().handleError(line, 
			"method return type must be int or boolean or void");
	}

	function_def->type = method_return_type;

	cout << "registering function " << method_name << " with type " << TypeToString(method_return_type) << endl;
	getSymbolTableInstance()->registerFunction(method_name, function_def);
}

registerDefinition(VariableDef) {
	if ( variable_type != Int && variable_type != Boolean) {
		ErrorHandler::getInstance().handleError(line, 
			"possible variable types are int or boolean but found " + TypeToString(variable_type));
	} else {
		ExpressionType *type;
		if (variable_type == Int) {
			type = new IntegerType();
		} else {
			type = new BooleanType();
		}

		Variable *variable = getSymbolTableInstance()->getVariable(variable_name);

		if (variable != NULL) {
			ErrorHandler::getInstance().handleError(line, 
				"already defined variable '" + variable_name + "'");
			return;
		}

		if (is_array_def) {
			if (array_dimension < 0) {
				ErrorHandler::getInstance().handleError(line, "array size must be greater than zero");
			} else {
				getSymbolTableInstance()->registerVariable(variable_name, 
					new ArrayVariable(type, variable_name, array_dimension));
			}
		} else {
			SimpleVariable *variable = new SimpleVariable(type, variable_name);
			if (initial_value != NULL) {
				DecoratedExpression *d_init_value = (DecoratedExpression*)initial_value->validateSemantics();
				variable->initialized = true;
				variable->initial_value = d_init_value;
			}
			getSymbolTableInstance()->registerVariable(variable_name, variable);
		}
	}
}

registerDefinition(ParameterDef) {
	/* DO NOTHING */
}

/*=====================================================================*/
%operation %virtual DecoratedBlockStatement* checkBody(MethodDef *this);

checkBody(MethodDef) {
    return (DecoratedBlockStatement*)method_body->validateSemantics();
}

%include "decaf_semantic_tree.tc"

%include "symbol_table.tc"