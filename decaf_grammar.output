Estado 7 conflictos: 2 desplazamiento(s)/reducción(ones)
Estado 11 conflictos: 2 desplazamiento(s)/reducción(ones)


Gramática

    0 $accept: program $end

    1 program: class_def

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    3 optional_field_decl_list: field_decl_list
    4                         | /* vacío */

    5 optional_method_decl_list: method_decl_list
    6                          | /* vacío */

    7 field_decl_list: field_decl_list field_decl
    8                | field_decl

    9 method_decl_list: method_decl_list method_decl
   10                 | method_decl

   11 class_name: "'identificador'"

   12 field_decl: type var_list ';'

   13 var_list: var_list ',' var
   14         | var

   15 var: "'identificador'" optional_initialization
   16    | "'identificador'" '[' "constante entera" ']'

   17 optional_initialization: '=' constant
   18                        | /* vacío */

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block

   20 return_type: type
   21            | "'void'"

   22 opt_parameter_decl_list: parameter_decl_list
   23                        | /* vacío */

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl
   25                    | parameter_decl

   26 parameter_decl: type "'identificador'"

   27 block: '{' opt_statement_list '}'

   28 opt_statement_list: statement_list
   29                   | /* vacío */

   30 type: "'int'"
   31     | "'boolean'"

   32 statement_list: statement_list statement
   33               | statement

   34 statement: assign ';'
   35          | method_call ';'
   36          | if_statement
   37          | while_statement
   38          | for_statement
   39          | return_statement ';'
   40          | break_statement ';'
   41          | continue_statement ';'
   42          | block

   43 assign: lvalue '=' expr

   44 method_call: method_name '(' opt_method_call_argument_list ')'
   45            | "'print'" print_argument_list
   46            | "'read'" read_argument_list

   47 method_name: "'identificador'"

   48 opt_method_call_argument_list: method_call_argument_list
   49                              | /* vacío */

   50 method_call_argument_list: method_call_argument_list ',' expr
   51                          | expr

   52 print_argument_list: print_argument_list ',' print_argument
   53                    | print_argument

   54 print_argument: "constante de cadena"
   55               | expr

   56 read_argument_list: read_argument_list ',' lvalue
   57                   | lvalue

   58 lvalue: "'identificador'" opt_array_dimension

   59 opt_array_dimension: '[' expr ']'
   60                    | /* vacío */

   61 if_statement: "'if'" '(' expr ')' block opt_else

   62 opt_else: "'else'" block
   63         | /* vacío */

   64 while_statement: "'while'" '(' expr ')' block

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

   66 for_assignment_list: for_assignment_list ',' assign
   67                    | assign

   68 return_statement: "'return'" opt_expr

   69 break_statement: "'break'"

   70 continue_statement: "'continue'"

   71 opt_expr: expr
   72         | /* vacío */

   73 expr: expr "operador booleano 'or'" bool_term
   74     | bool_term

   75 bool_term: bool_term "operador booleano 'and'" relational_expr
   76          | relational_expr

   77 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | bit_shift_expr

   79 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | arith_expr

   81 arith_expr: arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | arith_term

   83 arith_term: arith_term "operador aritmetico '*', '/', '%' " factor
   84           | factor

   85 factor: '!' factor
   86       | "operador aritmetico '+' o '-'" factor
   87       | lvalue
   88       | method_name '(' opt_method_call_argument_list ')'
   89       | constant
   90       | '(' expr ')'

   91 constant: "constante entera"
   92         | "constante caracter"
   93         | "constante real"
   94         | bool_constant

   95 bool_constant: "'true'"
   96              | "'false'"


Terminales con las reglas donde aparecen

$end (0) 0
'!' (33) 85
'(' (40) 19 44 61 64 65 88 90
')' (41) 19 44 61 64 65 88 90
',' (44) 13 24 50 52 56 66
';' (59) 12 34 35 39 40 41 65
'=' (61) 17 43
'[' (91) 16 59
']' (93) 16 59
'{' (123) 2 27
'}' (125) 2 27
error (256)
"'identificador'" (258) 11 15 16 19 26 47 58
"'class'" (259) 2
"'break'" (260) 69
"'continue'" (261) 70
"'while'" (262) 64
"'for'" (263) 65
"'if'" (264) 61
"'else'" (265) 62
"'return'" (266) 68
"'read'" (267) 46
"'print'" (268) 45
"'true'" (269) 95
"'false'" (270) 96
"'int'" (271) 30
"'void'" (272) 21
"'boolean'" (273) 31
"operador booleano 'or'" (274) 73
"operador booleano 'and'" (275) 75
"operador de corrimiento de bits" (276) 79
"operador relacional '>', '<', '>=', '<=', '==' o '!='" (277) 77
"operador aritmetico '+' o '-'" (278) 81 86
"operador aritmetico '*', '/', '%' " (279) 83
"constante caracter" (280) 92
"constante entera" (281) 16 91
"constante real" (282) 93
"constante de cadena" (283) 54


No terminales con las reglas donde aparecen

$accept (39)
    en la izquierda: 0
program (40)
    en la izquierda: 1, en la derecha: 0
class_def (41)
    en la izquierda: 2, en la derecha: 1
optional_field_decl_list (42)
    en la izquierda: 3 4, en la derecha: 2
optional_method_decl_list (43)
    en la izquierda: 5 6, en la derecha: 2
field_decl_list (44)
    en la izquierda: 7 8, en la derecha: 3 7
method_decl_list (45)
    en la izquierda: 9 10, en la derecha: 5 9
class_name (46)
    en la izquierda: 11, en la derecha: 2
field_decl (47)
    en la izquierda: 12, en la derecha: 7 8
var_list (48)
    en la izquierda: 13 14, en la derecha: 12 13
var (49)
    en la izquierda: 15 16, en la derecha: 13 14
optional_initialization (50)
    en la izquierda: 17 18, en la derecha: 15
method_decl (51)
    en la izquierda: 19, en la derecha: 9 10
return_type (52)
    en la izquierda: 20 21, en la derecha: 19
opt_parameter_decl_list (53)
    en la izquierda: 22 23, en la derecha: 19
parameter_decl_list (54)
    en la izquierda: 24 25, en la derecha: 22 24
parameter_decl (55)
    en la izquierda: 26, en la derecha: 24 25
block (56)
    en la izquierda: 27, en la derecha: 19 42 61 62 64 65
opt_statement_list (57)
    en la izquierda: 28 29, en la derecha: 27
type (58)
    en la izquierda: 30 31, en la derecha: 12 20 26
statement_list (59)
    en la izquierda: 32 33, en la derecha: 28 32
statement (60)
    en la izquierda: 34 35 36 37 38 39 40 41 42, en la derecha: 32
    33
assign (61)
    en la izquierda: 43, en la derecha: 34 66 67
method_call (62)
    en la izquierda: 44 45 46, en la derecha: 35
method_name (63)
    en la izquierda: 47, en la derecha: 44 88
opt_method_call_argument_list (64)
    en la izquierda: 48 49, en la derecha: 44 88
method_call_argument_list (65)
    en la izquierda: 50 51, en la derecha: 48 50
print_argument_list (66)
    en la izquierda: 52 53, en la derecha: 45 52
print_argument (67)
    en la izquierda: 54 55, en la derecha: 52 53
read_argument_list (68)
    en la izquierda: 56 57, en la derecha: 46 56
lvalue (69)
    en la izquierda: 58, en la derecha: 43 56 57 87
opt_array_dimension (70)
    en la izquierda: 59 60, en la derecha: 58
if_statement (71)
    en la izquierda: 61, en la derecha: 36
opt_else (72)
    en la izquierda: 62 63, en la derecha: 61
while_statement (73)
    en la izquierda: 64, en la derecha: 37
for_statement (74)
    en la izquierda: 65, en la derecha: 38
for_assignment_list (75)
    en la izquierda: 66 67, en la derecha: 65 66
return_statement (76)
    en la izquierda: 68, en la derecha: 39
break_statement (77)
    en la izquierda: 69, en la derecha: 40
continue_statement (78)
    en la izquierda: 70, en la derecha: 41
opt_expr (79)
    en la izquierda: 71 72, en la derecha: 68
expr (80)
    en la izquierda: 73 74, en la derecha: 43 50 51 55 59 61 64 65
    71 73 90
bool_term (81)
    en la izquierda: 75 76, en la derecha: 73 74 75
relational_expr (82)
    en la izquierda: 77 78, en la derecha: 75 76 77
bit_shift_expr (83)
    en la izquierda: 79 80, en la derecha: 77 78 79
arith_expr (84)
    en la izquierda: 81 82, en la derecha: 79 80 81
arith_term (85)
    en la izquierda: 83 84, en la derecha: 81 82 83
factor (86)
    en la izquierda: 85 86 87 88 89 90, en la derecha: 83 84 85 86
constant (87)
    en la izquierda: 91 92 93 94, en la derecha: 17 89
bool_constant (88)
    en la izquierda: 95 96, en la derecha: 94


estado 0

    0 $accept: . program $end
    1 program: . class_def
    2 class_def: . "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    "'class'"  desplazar e ir al estado 1

    program    ir al estado 2
    class_def  ir al estado 3


estado 1

    2 class_def: "'class'" . class_name '{' optional_field_decl_list optional_method_decl_list '}'
   11 class_name: . "'identificador'"

    "'identificador'"  desplazar e ir al estado 4

    class_name  ir al estado 5


estado 2

    0 $accept: program . $end

    $end  desplazar e ir al estado 6


estado 3

    1 program: class_def .

    $default  reduce usando la regla 1 (program)


estado 4

   11 class_name: "'identificador'" .

    $default  reduce usando la regla 11 (class_name)


estado 5

    2 class_def: "'class'" class_name . '{' optional_field_decl_list optional_method_decl_list '}'

    '{'  desplazar e ir al estado 7


estado 6

    0 $accept: program $end .

    $default  aceptar


estado 7

    2 class_def: "'class'" class_name '{' . optional_field_decl_list optional_method_decl_list '}'
    3 optional_field_decl_list: . field_decl_list
    4                         | .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: . field_decl_list field_decl
    8                | . field_decl
   12 field_decl: . type var_list ';'
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'boolean'"  desplazar e ir al estado 9

    "'int'"      [reduce usando la regla 4 (optional_field_decl_list)]
    "'boolean'"  [reduce usando la regla 4 (optional_field_decl_list)]
    $default     reduce usando la regla 4 (optional_field_decl_list)

    optional_field_decl_list  ir al estado 10
    field_decl_list           ir al estado 11
    field_decl                ir al estado 12
    type                      ir al estado 13


estado 8

   30 type: "'int'" .

    $default  reduce usando la regla 30 (type)


estado 9

   31 type: "'boolean'" .

    $default  reduce usando la regla 31 (type)


estado 10

    2 class_def: "'class'" class_name '{' optional_field_decl_list . optional_method_decl_list '}'
    5 optional_method_decl_list: . method_decl_list
    6                          | .  ['}']
    9 method_decl_list: . method_decl_list method_decl
   10                 | . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'void'"     desplazar e ir al estado 14
    "'boolean'"  desplazar e ir al estado 9

    $default  reduce usando la regla 6 (optional_method_decl_list)

    optional_method_decl_list  ir al estado 15
    method_decl_list           ir al estado 16
    method_decl                ir al estado 17
    return_type                ir al estado 18
    type                       ir al estado 19


estado 11

    3 optional_field_decl_list: field_decl_list .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: field_decl_list . field_decl
   12 field_decl: . type var_list ';'
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'boolean'"  desplazar e ir al estado 9

    "'int'"      [reduce usando la regla 3 (optional_field_decl_list)]
    "'boolean'"  [reduce usando la regla 3 (optional_field_decl_list)]
    $default     reduce usando la regla 3 (optional_field_decl_list)

    field_decl  ir al estado 20
    type        ir al estado 13


estado 12

    8 field_decl_list: field_decl .

    $default  reduce usando la regla 8 (field_decl_list)


estado 13

   12 field_decl: type . var_list ';'
   13 var_list: . var_list ',' var
   14         | . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  desplazar e ir al estado 21

    var_list  ir al estado 22
    var       ir al estado 23


estado 14

   21 return_type: "'void'" .

    $default  reduce usando la regla 21 (return_type)


estado 15

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list . '}'

    '}'  desplazar e ir al estado 24


estado 16

    5 optional_method_decl_list: method_decl_list .  ['}']
    9 method_decl_list: method_decl_list . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'void'"     desplazar e ir al estado 14
    "'boolean'"  desplazar e ir al estado 9

    $default  reduce usando la regla 5 (optional_method_decl_list)

    method_decl  ir al estado 25
    return_type  ir al estado 18
    type         ir al estado 19


estado 17

   10 method_decl_list: method_decl .

    $default  reduce usando la regla 10 (method_decl_list)


estado 18

   19 method_decl: return_type . "'identificador'" '(' opt_parameter_decl_list ')' block

    "'identificador'"  desplazar e ir al estado 26


estado 19

   20 return_type: type .

    $default  reduce usando la regla 20 (return_type)


estado 20

    7 field_decl_list: field_decl_list field_decl .

    $default  reduce usando la regla 7 (field_decl_list)


estado 21

   15 var: "'identificador'" . optional_initialization
   16    | "'identificador'" . '[' "constante entera" ']'
   17 optional_initialization: . '=' constant
   18                        | .  [';', ',']

    '['  desplazar e ir al estado 27
    '='  desplazar e ir al estado 28

    $default  reduce usando la regla 18 (optional_initialization)

    optional_initialization  ir al estado 29


estado 22

   12 field_decl: type var_list . ';'
   13 var_list: var_list . ',' var

    ';'  desplazar e ir al estado 30
    ','  desplazar e ir al estado 31


estado 23

   14 var_list: var .

    $default  reduce usando la regla 14 (var_list)


estado 24

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}' .

    $default  reduce usando la regla 2 (class_def)


estado 25

    9 method_decl_list: method_decl_list method_decl .

    $default  reduce usando la regla 9 (method_decl_list)


estado 26

   19 method_decl: return_type "'identificador'" . '(' opt_parameter_decl_list ')' block

    '('  desplazar e ir al estado 32


estado 27

   16 var: "'identificador'" '[' . "constante entera" ']'

    "constante entera"  desplazar e ir al estado 33


estado 28

   17 optional_initialization: '=' . constant
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'true'"              desplazar e ir al estado 34
    "'false'"             desplazar e ir al estado 35
    "constante caracter"  desplazar e ir al estado 36
    "constante entera"    desplazar e ir al estado 37
    "constante real"      desplazar e ir al estado 38

    constant       ir al estado 39
    bool_constant  ir al estado 40


estado 29

   15 var: "'identificador'" optional_initialization .

    $default  reduce usando la regla 15 (var)


estado 30

   12 field_decl: type var_list ';' .

    $default  reduce usando la regla 12 (field_decl)


estado 31

   13 var_list: var_list ',' . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  desplazar e ir al estado 21

    var  ir al estado 41


estado 32

   19 method_decl: return_type "'identificador'" '(' . opt_parameter_decl_list ')' block
   22 opt_parameter_decl_list: . parameter_decl_list
   23                        | .  [')']
   24 parameter_decl_list: . parameter_decl_list ',' parameter_decl
   25                    | . parameter_decl
   26 parameter_decl: . type "'identificador'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'boolean'"  desplazar e ir al estado 9

    $default  reduce usando la regla 23 (opt_parameter_decl_list)

    opt_parameter_decl_list  ir al estado 42
    parameter_decl_list      ir al estado 43
    parameter_decl           ir al estado 44
    type                     ir al estado 45


estado 33

   16 var: "'identificador'" '[' "constante entera" . ']'

    ']'  desplazar e ir al estado 46


estado 34

   95 bool_constant: "'true'" .

    $default  reduce usando la regla 95 (bool_constant)


estado 35

   96 bool_constant: "'false'" .

    $default  reduce usando la regla 96 (bool_constant)


estado 36

   92 constant: "constante caracter" .

    $default  reduce usando la regla 92 (constant)


estado 37

   91 constant: "constante entera" .

    $default  reduce usando la regla 91 (constant)


estado 38

   93 constant: "constante real" .

    $default  reduce usando la regla 93 (constant)


estado 39

   17 optional_initialization: '=' constant .

    $default  reduce usando la regla 17 (optional_initialization)


estado 40

   94 constant: bool_constant .

    $default  reduce usando la regla 94 (constant)


estado 41

   13 var_list: var_list ',' var .

    $default  reduce usando la regla 13 (var_list)


estado 42

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list . ')' block

    ')'  desplazar e ir al estado 47


estado 43

   22 opt_parameter_decl_list: parameter_decl_list .  [')']
   24 parameter_decl_list: parameter_decl_list . ',' parameter_decl

    ','  desplazar e ir al estado 48

    $default  reduce usando la regla 22 (opt_parameter_decl_list)


estado 44

   25 parameter_decl_list: parameter_decl .

    $default  reduce usando la regla 25 (parameter_decl_list)


estado 45

   26 parameter_decl: type . "'identificador'"

    "'identificador'"  desplazar e ir al estado 49


estado 46

   16 var: "'identificador'" '[' "constante entera" ']' .

    $default  reduce usando la regla 16 (var)


estado 47

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' . block
   27 block: . '{' opt_statement_list '}'

    '{'  desplazar e ir al estado 50

    block  ir al estado 51


estado 48

   24 parameter_decl_list: parameter_decl_list ',' . parameter_decl
   26 parameter_decl: . type "'identificador'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      desplazar e ir al estado 8
    "'boolean'"  desplazar e ir al estado 9

    parameter_decl  ir al estado 52
    type            ir al estado 45


estado 49

   26 parameter_decl: type "'identificador'" .

    $default  reduce usando la regla 26 (parameter_decl)


estado 50

   27 block: . '{' opt_statement_list '}'
   27      | '{' . opt_statement_list '}'
   28 opt_statement_list: . statement_list
   29                   | .  ['}']
   32 statement_list: . statement_list statement
   33               | . statement
   34 statement: . assign ';'
   35          | . method_call ';'
   36          | . if_statement
   37          | . while_statement
   38          | . for_statement
   39          | . return_statement ';'
   40          | . break_statement ';'
   41          | . continue_statement ';'
   42          | . block
   43 assign: . lvalue '=' expr
   44 method_call: . method_name '(' opt_method_call_argument_list ')'
   45            | . "'print'" print_argument_list
   46            | . "'read'" read_argument_list
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: . "'if'" '(' expr ')' block opt_else
   64 while_statement: . "'while'" '(' expr ')' block
   65 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   68 return_statement: . "'return'" opt_expr
   69 break_statement: . "'break'"
   70 continue_statement: . "'continue'"

    "'identificador'"  desplazar e ir al estado 53
    "'break'"          desplazar e ir al estado 54
    "'continue'"       desplazar e ir al estado 55
    "'while'"          desplazar e ir al estado 56
    "'for'"            desplazar e ir al estado 57
    "'if'"             desplazar e ir al estado 58
    "'return'"         desplazar e ir al estado 59
    "'read'"           desplazar e ir al estado 60
    "'print'"          desplazar e ir al estado 61
    '{'                desplazar e ir al estado 50

    $default  reduce usando la regla 29 (opt_statement_list)

    block               ir al estado 62
    opt_statement_list  ir al estado 63
    statement_list      ir al estado 64
    statement           ir al estado 65
    assign              ir al estado 66
    method_call         ir al estado 67
    method_name         ir al estado 68
    lvalue              ir al estado 69
    if_statement        ir al estado 70
    while_statement     ir al estado 71
    for_statement       ir al estado 72
    return_statement    ir al estado 73
    break_statement     ir al estado 74
    continue_statement  ir al estado 75


estado 51

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block .

    $default  reduce usando la regla 19 (method_decl)


estado 52

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl .

    $default  reduce usando la regla 24 (parameter_decl_list)


estado 53

   47 method_name: "'identificador'" .  ['(']
   58 lvalue: "'identificador'" . opt_array_dimension
   59 opt_array_dimension: . '[' expr ']'
   60                    | .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", "operador aritmetico '*', '/', '%' ", ';', ',', ']', '=', ')']

    '['  desplazar e ir al estado 76

    '('       reduce usando la regla 47 (method_name)
    $default  reduce usando la regla 60 (opt_array_dimension)

    opt_array_dimension  ir al estado 77


estado 54

   69 break_statement: "'break'" .

    $default  reduce usando la regla 69 (break_statement)


estado 55

   70 continue_statement: "'continue'" .

    $default  reduce usando la regla 70 (continue_statement)


estado 56

   64 while_statement: "'while'" . '(' expr ')' block

    '('  desplazar e ir al estado 78


estado 57

   65 for_statement: "'for'" . '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

    '('  desplazar e ir al estado 79


estado 58

   61 if_statement: "'if'" . '(' expr ')' block opt_else

    '('  desplazar e ir al estado 80


estado 59

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   68 return_statement: "'return'" . opt_expr
   71 opt_expr: . expr
   72         | .  [';']
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    $default  reduce usando la regla 72 (opt_expr)

    method_name      ir al estado 84
    lvalue           ir al estado 85
    opt_expr         ir al estado 86
    expr             ir al estado 87
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 60

   46 method_call: "'read'" . read_argument_list
   56 read_argument_list: . read_argument_list ',' lvalue
   57                   | . lvalue
   58 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  desplazar e ir al estado 95

    read_argument_list  ir al estado 96
    lvalue              ir al estado 97


estado 61

   45 method_call: "'print'" . print_argument_list
   47 method_name: . "'identificador'"
   52 print_argument_list: . print_argument_list ',' print_argument
   53                    | . print_argument
   54 print_argument: . "constante de cadena"
   55               | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    "constante de cadena"            desplazar e ir al estado 98
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name          ir al estado 84
    print_argument_list  ir al estado 99
    print_argument       ir al estado 100
    lvalue               ir al estado 85
    expr                 ir al estado 101
    bool_term            ir al estado 88
    relational_expr      ir al estado 89
    bit_shift_expr       ir al estado 90
    arith_expr           ir al estado 91
    arith_term           ir al estado 92
    factor               ir al estado 93
    constant             ir al estado 94
    bool_constant        ir al estado 40


estado 62

   42 statement: block .

    $default  reduce usando la regla 42 (statement)


estado 63

   27 block: '{' opt_statement_list . '}'

    '}'  desplazar e ir al estado 102


estado 64

   27 block: . '{' opt_statement_list '}'
   28 opt_statement_list: statement_list .  ['}']
   32 statement_list: statement_list . statement
   34 statement: . assign ';'
   35          | . method_call ';'
   36          | . if_statement
   37          | . while_statement
   38          | . for_statement
   39          | . return_statement ';'
   40          | . break_statement ';'
   41          | . continue_statement ';'
   42          | . block
   43 assign: . lvalue '=' expr
   44 method_call: . method_name '(' opt_method_call_argument_list ')'
   45            | . "'print'" print_argument_list
   46            | . "'read'" read_argument_list
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: . "'if'" '(' expr ')' block opt_else
   64 while_statement: . "'while'" '(' expr ')' block
   65 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   68 return_statement: . "'return'" opt_expr
   69 break_statement: . "'break'"
   70 continue_statement: . "'continue'"

    "'identificador'"  desplazar e ir al estado 53
    "'break'"          desplazar e ir al estado 54
    "'continue'"       desplazar e ir al estado 55
    "'while'"          desplazar e ir al estado 56
    "'for'"            desplazar e ir al estado 57
    "'if'"             desplazar e ir al estado 58
    "'return'"         desplazar e ir al estado 59
    "'read'"           desplazar e ir al estado 60
    "'print'"          desplazar e ir al estado 61
    '{'                desplazar e ir al estado 50

    $default  reduce usando la regla 28 (opt_statement_list)

    block               ir al estado 62
    statement           ir al estado 103
    assign              ir al estado 66
    method_call         ir al estado 67
    method_name         ir al estado 68
    lvalue              ir al estado 69
    if_statement        ir al estado 70
    while_statement     ir al estado 71
    for_statement       ir al estado 72
    return_statement    ir al estado 73
    break_statement     ir al estado 74
    continue_statement  ir al estado 75


estado 65

   33 statement_list: statement .

    $default  reduce usando la regla 33 (statement_list)


estado 66

   34 statement: assign . ';'

    ';'  desplazar e ir al estado 104


estado 67

   35 statement: method_call . ';'

    ';'  desplazar e ir al estado 105


estado 68

   44 method_call: method_name . '(' opt_method_call_argument_list ')'

    '('  desplazar e ir al estado 106


estado 69

   43 assign: lvalue . '=' expr

    '='  desplazar e ir al estado 107


estado 70

   36 statement: if_statement .

    $default  reduce usando la regla 36 (statement)


estado 71

   37 statement: while_statement .

    $default  reduce usando la regla 37 (statement)


estado 72

   38 statement: for_statement .

    $default  reduce usando la regla 38 (statement)


estado 73

   39 statement: return_statement . ';'

    ';'  desplazar e ir al estado 108


estado 74

   40 statement: break_statement . ';'

    ';'  desplazar e ir al estado 109


estado 75

   41 statement: continue_statement . ';'

    ';'  desplazar e ir al estado 110


estado 76

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   59 opt_array_dimension: '[' . expr ']'
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 111
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 77

   58 lvalue: "'identificador'" opt_array_dimension .

    $default  reduce usando la regla 58 (lvalue)


estado 78

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   64 while_statement: "'while'" '(' . expr ')' block
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 112
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 79

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' . for_assignment_list ';' expr ';' for_assignment_list ')' block
   66 for_assignment_list: . for_assignment_list ',' assign
   67                    | . assign

    "'identificador'"  desplazar e ir al estado 95

    assign               ir al estado 113
    lvalue               ir al estado 69
    for_assignment_list  ir al estado 114


estado 80

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: "'if'" '(' . expr ')' block opt_else
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 115
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 81

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   86       | "operador aritmetico '+' o '-'" . factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name    ir al estado 84
    lvalue         ir al estado 85
    factor         ir al estado 116
    constant       ir al estado 94
    bool_constant  ir al estado 40


estado 82

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   90       | '(' . expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 117
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 83

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   85 factor: . '!' factor
   85       | '!' . factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name    ir al estado 84
    lvalue         ir al estado 85
    factor         ir al estado 118
    constant       ir al estado 94
    bool_constant  ir al estado 40


estado 84

   88 factor: method_name . '(' opt_method_call_argument_list ')'

    '('  desplazar e ir al estado 119


estado 85

   87 factor: lvalue .

    $default  reduce usando la regla 87 (factor)


estado 86

   68 return_statement: "'return'" opt_expr .

    $default  reduce usando la regla 68 (return_statement)


estado 87

   71 opt_expr: expr .  [';']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120

    $default  reduce usando la regla 71 (opt_expr)


estado 88

   74 expr: bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   75 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  desplazar e ir al estado 121

    $default  reduce usando la regla 74 (expr)


estado 89

   76 bool_term: relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   77 relational_expr: relational_expr . "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr

    "operador relacional '>', '<', '>=', '<=', '==' o '!='"  desplazar e ir al estado 122

    $default  reduce usando la regla 76 (bool_term)


estado 90

   78 relational_expr: bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   79 bit_shift_expr: bit_shift_expr . "operador de corrimiento de bits" arith_expr

    "operador de corrimiento de bits"  desplazar e ir al estado 123

    $default  reduce usando la regla 78 (relational_expr)


estado 91

   80 bit_shift_expr: arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   81 arith_expr: arith_expr . "operador aritmetico '+' o '-'" arith_term

    "operador aritmetico '+' o '-'"  desplazar e ir al estado 124

    $default  reduce usando la regla 80 (bit_shift_expr)


estado 92

   82 arith_expr: arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", ';', ',', ']', ')']
   83 arith_term: arith_term . "operador aritmetico '*', '/', '%' " factor

    "operador aritmetico '*', '/', '%' "  desplazar e ir al estado 125

    $default  reduce usando la regla 82 (arith_expr)


estado 93

   84 arith_term: factor .

    $default  reduce usando la regla 84 (arith_term)


estado 94

   89 factor: constant .

    $default  reduce usando la regla 89 (factor)


estado 95

   58 lvalue: "'identificador'" . opt_array_dimension
   59 opt_array_dimension: . '[' expr ']'
   60                    | .  [';', ',', '=']

    '['  desplazar e ir al estado 76

    $default  reduce usando la regla 60 (opt_array_dimension)

    opt_array_dimension  ir al estado 77


estado 96

   46 method_call: "'read'" read_argument_list .  [';']
   56 read_argument_list: read_argument_list . ',' lvalue

    ','  desplazar e ir al estado 126

    $default  reduce usando la regla 46 (method_call)


estado 97

   57 read_argument_list: lvalue .

    $default  reduce usando la regla 57 (read_argument_list)


estado 98

   54 print_argument: "constante de cadena" .

    $default  reduce usando la regla 54 (print_argument)


estado 99

   45 method_call: "'print'" print_argument_list .  [';']
   52 print_argument_list: print_argument_list . ',' print_argument

    ','  desplazar e ir al estado 127

    $default  reduce usando la regla 45 (method_call)


estado 100

   53 print_argument_list: print_argument .

    $default  reduce usando la regla 53 (print_argument_list)


estado 101

   55 print_argument: expr .  [';', ',']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120

    $default  reduce usando la regla 55 (print_argument)


estado 102

   27 block: '{' opt_statement_list '}' .

    $default  reduce usando la regla 27 (block)


estado 103

   32 statement_list: statement_list statement .

    $default  reduce usando la regla 32 (statement_list)


estado 104

   34 statement: assign ';' .

    $default  reduce usando la regla 34 (statement)


estado 105

   35 statement: method_call ';' .

    $default  reduce usando la regla 35 (statement)


estado 106

   44 method_call: method_name '(' . opt_method_call_argument_list ')'
   47 method_name: . "'identificador'"
   48 opt_method_call_argument_list: . method_call_argument_list
   49                              | .  [')']
   50 method_call_argument_list: . method_call_argument_list ',' expr
   51                          | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    $default  reduce usando la regla 49 (opt_method_call_argument_list)

    method_name                    ir al estado 84
    opt_method_call_argument_list  ir al estado 128
    method_call_argument_list      ir al estado 129
    lvalue                         ir al estado 85
    expr                           ir al estado 130
    bool_term                      ir al estado 88
    relational_expr                ir al estado 89
    bit_shift_expr                 ir al estado 90
    arith_expr                     ir al estado 91
    arith_term                     ir al estado 92
    factor                         ir al estado 93
    constant                       ir al estado 94
    bool_constant                  ir al estado 40


estado 107

   43 assign: lvalue '=' . expr
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 131
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 108

   39 statement: return_statement ';' .

    $default  reduce usando la regla 39 (statement)


estado 109

   40 statement: break_statement ';' .

    $default  reduce usando la regla 40 (statement)


estado 110

   41 statement: continue_statement ';' .

    $default  reduce usando la regla 41 (statement)


estado 111

   59 opt_array_dimension: '[' expr . ']'
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120
    ']'                       desplazar e ir al estado 132


estado 112

   64 while_statement: "'while'" '(' expr . ')' block
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120
    ')'                       desplazar e ir al estado 133


estado 113

   67 for_assignment_list: assign .

    $default  reduce usando la regla 67 (for_assignment_list)


estado 114

   65 for_statement: "'for'" '(' for_assignment_list . ';' expr ';' for_assignment_list ')' block
   66 for_assignment_list: for_assignment_list . ',' assign

    ';'  desplazar e ir al estado 134
    ','  desplazar e ir al estado 135


estado 115

   61 if_statement: "'if'" '(' expr . ')' block opt_else
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120
    ')'                       desplazar e ir al estado 136


estado 116

   86 factor: "operador aritmetico '+' o '-'" factor .

    $default  reduce usando la regla 86 (factor)


estado 117

   73 expr: expr . "operador booleano 'or'" bool_term
   90 factor: '(' expr . ')'

    "operador booleano 'or'"  desplazar e ir al estado 120
    ')'                       desplazar e ir al estado 137


estado 118

   85 factor: '!' factor .

    $default  reduce usando la regla 85 (factor)


estado 119

   47 method_name: . "'identificador'"
   48 opt_method_call_argument_list: . method_call_argument_list
   49                              | .  [')']
   50 method_call_argument_list: . method_call_argument_list ',' expr
   51                          | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   88       | method_name '(' . opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    $default  reduce usando la regla 49 (opt_method_call_argument_list)

    method_name                    ir al estado 84
    opt_method_call_argument_list  ir al estado 138
    method_call_argument_list      ir al estado 129
    lvalue                         ir al estado 85
    expr                           ir al estado 130
    bool_term                      ir al estado 88
    relational_expr                ir al estado 89
    bit_shift_expr                 ir al estado 90
    arith_expr                     ir al estado 91
    arith_term                     ir al estado 92
    factor                         ir al estado 93
    constant                       ir al estado 94
    bool_constant                  ir al estado 40


estado 120

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: expr "operador booleano 'or'" . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    bool_term        ir al estado 139
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 121

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   75 bool_term: bool_term "operador booleano 'and'" . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    relational_expr  ir al estado 140
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 122

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   77 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name     ir al estado 84
    lvalue          ir al estado 85
    bit_shift_expr  ir al estado 141
    arith_expr      ir al estado 91
    arith_term      ir al estado 92
    factor          ir al estado 93
    constant        ir al estado 94
    bool_constant   ir al estado 40


estado 123

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   79 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name    ir al estado 84
    lvalue         ir al estado 85
    arith_expr     ir al estado 142
    arith_term     ir al estado 92
    factor         ir al estado 93
    constant       ir al estado 94
    bool_constant  ir al estado 40


estado 124

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   81 arith_expr: arith_expr "operador aritmetico '+' o '-'" . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name    ir al estado 84
    lvalue         ir al estado 85
    arith_term     ir al estado 143
    factor         ir al estado 93
    constant       ir al estado 94
    bool_constant  ir al estado 40


estado 125

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   83 arith_term: arith_term "operador aritmetico '*', '/', '%' " . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name    ir al estado 84
    lvalue         ir al estado 85
    factor         ir al estado 144
    constant       ir al estado 94
    bool_constant  ir al estado 40


estado 126

   56 read_argument_list: read_argument_list ',' . lvalue
   58 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  desplazar e ir al estado 95

    lvalue  ir al estado 145


estado 127

   47 method_name: . "'identificador'"
   52 print_argument_list: print_argument_list ',' . print_argument
   54 print_argument: . "constante de cadena"
   55               | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    "constante de cadena"            desplazar e ir al estado 98
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    print_argument   ir al estado 146
    lvalue           ir al estado 85
    expr             ir al estado 101
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 128

   44 method_call: method_name '(' opt_method_call_argument_list . ')'

    ')'  desplazar e ir al estado 147


estado 129

   48 opt_method_call_argument_list: method_call_argument_list .  [')']
   50 method_call_argument_list: method_call_argument_list . ',' expr

    ','  desplazar e ir al estado 148

    $default  reduce usando la regla 48 (opt_method_call_argument_list)


estado 130

   51 method_call_argument_list: expr .  [',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120

    $default  reduce usando la regla 51 (method_call_argument_list)


estado 131

   43 assign: lvalue '=' expr .  [';', ',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120

    $default  reduce usando la regla 43 (assign)


estado 132

   59 opt_array_dimension: '[' expr ']' .

    $default  reduce usando la regla 59 (opt_array_dimension)


estado 133

   27 block: . '{' opt_statement_list '}'
   64 while_statement: "'while'" '(' expr ')' . block

    '{'  desplazar e ir al estado 50

    block  ir al estado 149


estado 134

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' for_assignment_list ';' . expr ';' for_assignment_list ')' block
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 150
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 135

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   66 for_assignment_list: for_assignment_list ',' . assign

    "'identificador'"  desplazar e ir al estado 95

    assign  ir al estado 151
    lvalue  ir al estado 69


estado 136

   27 block: . '{' opt_statement_list '}'
   61 if_statement: "'if'" '(' expr ')' . block opt_else

    '{'  desplazar e ir al estado 50

    block  ir al estado 152


estado 137

   90 factor: '(' expr ')' .

    $default  reduce usando la regla 90 (factor)


estado 138

   88 factor: method_name '(' opt_method_call_argument_list . ')'

    ')'  desplazar e ir al estado 153


estado 139

   73 expr: expr "operador booleano 'or'" bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   75 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  desplazar e ir al estado 121

    $default  reduce usando la regla 73 (expr)


estado 140

   75 bool_term: bool_term "operador booleano 'and'" relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   77 relational_expr: relational_expr . "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr

    "operador relacional '>', '<', '>=', '<=', '==' o '!='"  desplazar e ir al estado 122

    $default  reduce usando la regla 75 (bool_term)


estado 141

   77 relational_expr: relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   79 bit_shift_expr: bit_shift_expr . "operador de corrimiento de bits" arith_expr

    "operador de corrimiento de bits"  desplazar e ir al estado 123

    $default  reduce usando la regla 77 (relational_expr)


estado 142

   79 bit_shift_expr: bit_shift_expr "operador de corrimiento de bits" arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", ';', ',', ']', ')']
   81 arith_expr: arith_expr . "operador aritmetico '+' o '-'" arith_term

    "operador aritmetico '+' o '-'"  desplazar e ir al estado 124

    $default  reduce usando la regla 79 (bit_shift_expr)


estado 143

   81 arith_expr: arith_expr "operador aritmetico '+' o '-'" arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "operador de corrimiento de bits", "operador relacional '>', '<', '>=', '<=', '==' o '!='", "operador aritmetico '+' o '-'", ';', ',', ']', ')']
   83 arith_term: arith_term . "operador aritmetico '*', '/', '%' " factor

    "operador aritmetico '*', '/', '%' "  desplazar e ir al estado 125

    $default  reduce usando la regla 81 (arith_expr)


estado 144

   83 arith_term: arith_term "operador aritmetico '*', '/', '%' " factor .

    $default  reduce usando la regla 83 (arith_term)


estado 145

   56 read_argument_list: read_argument_list ',' lvalue .

    $default  reduce usando la regla 56 (read_argument_list)


estado 146

   52 print_argument_list: print_argument_list ',' print_argument .

    $default  reduce usando la regla 52 (print_argument_list)


estado 147

   44 method_call: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce usando la regla 44 (method_call)


estado 148

   47 method_name: . "'identificador'"
   50 method_call_argument_list: method_call_argument_list ',' . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr "operador relacional '>', '<', '>=', '<=', '==' o '!='" bit_shift_expr
   78                | . bit_shift_expr
   79 bit_shift_expr: . bit_shift_expr "operador de corrimiento de bits" arith_expr
   80               | . arith_expr
   81 arith_expr: . arith_expr "operador aritmetico '+' o '-'" arith_term
   82           | . arith_term
   83 arith_term: . arith_term "operador aritmetico '*', '/', '%' " factor
   84           | . factor
   85 factor: . '!' factor
   86       | . "operador aritmetico '+' o '-'" factor
   87       | . lvalue
   88       | . method_name '(' opt_method_call_argument_list ')'
   89       | . constant
   90       | . '(' expr ')'
   91 constant: . "constante entera"
   92         | . "constante caracter"
   93         | . "constante real"
   94         | . bool_constant
   95 bool_constant: . "'true'"
   96              | . "'false'"

    "'identificador'"                desplazar e ir al estado 53
    "'true'"                         desplazar e ir al estado 34
    "'false'"                        desplazar e ir al estado 35
    "operador aritmetico '+' o '-'"  desplazar e ir al estado 81
    "constante caracter"             desplazar e ir al estado 36
    "constante entera"               desplazar e ir al estado 37
    "constante real"                 desplazar e ir al estado 38
    '('                              desplazar e ir al estado 82
    '!'                              desplazar e ir al estado 83

    method_name      ir al estado 84
    lvalue           ir al estado 85
    expr             ir al estado 154
    bool_term        ir al estado 88
    relational_expr  ir al estado 89
    bit_shift_expr   ir al estado 90
    arith_expr       ir al estado 91
    arith_term       ir al estado 92
    factor           ir al estado 93
    constant         ir al estado 94
    bool_constant    ir al estado 40


estado 149

   64 while_statement: "'while'" '(' expr ')' block .

    $default  reduce usando la regla 64 (while_statement)


estado 150

   65 for_statement: "'for'" '(' for_assignment_list ';' expr . ';' for_assignment_list ')' block
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120
    ';'                       desplazar e ir al estado 155


estado 151

   66 for_assignment_list: for_assignment_list ',' assign .

    $default  reduce usando la regla 66 (for_assignment_list)


estado 152

   61 if_statement: "'if'" '(' expr ')' block . opt_else
   62 opt_else: . "'else'" block
   63         | .  ["'identificador'", "'break'", "'continue'", "'while'", "'for'", "'if'", "'return'", "'read'", "'print'", '{', '}']

    "'else'"  desplazar e ir al estado 156

    $default  reduce usando la regla 63 (opt_else)

    opt_else  ir al estado 157


estado 153

   88 factor: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce usando la regla 88 (factor)


estado 154

   50 method_call_argument_list: method_call_argument_list ',' expr .  [',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  desplazar e ir al estado 120

    $default  reduce usando la regla 50 (method_call_argument_list)


estado 155

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' . for_assignment_list ')' block
   66 for_assignment_list: . for_assignment_list ',' assign
   67                    | . assign

    "'identificador'"  desplazar e ir al estado 95

    assign               ir al estado 113
    lvalue               ir al estado 69
    for_assignment_list  ir al estado 158


estado 156

   27 block: . '{' opt_statement_list '}'
   62 opt_else: "'else'" . block

    '{'  desplazar e ir al estado 50

    block  ir al estado 159


estado 157

   61 if_statement: "'if'" '(' expr ')' block opt_else .

    $default  reduce usando la regla 61 (if_statement)


estado 158

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list . ')' block
   66 for_assignment_list: for_assignment_list . ',' assign

    ','  desplazar e ir al estado 135
    ')'  desplazar e ir al estado 160


estado 159

   62 opt_else: "'else'" block .

    $default  reduce usando la regla 62 (opt_else)


estado 160

   27 block: . '{' opt_statement_list '}'
   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' . block

    '{'  desplazar e ir al estado 50

    block  ir al estado 161


estado 161

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block .

    $default  reduce usando la regla 65 (for_statement)
